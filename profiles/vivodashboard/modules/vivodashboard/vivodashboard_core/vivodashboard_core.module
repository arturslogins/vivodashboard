<?php
/**
 * @file
 * Code for the VIVO Dashboard Core feature.
 */

include_once 'vivodashboard_core.features.inc';

/**
 * Implements hook_page_alter().
 */
function vivodashboard_core_page_alter(&$page) {
  // Needs to load after Facet API's facetapi.js
  drupal_add_js(drupal_get_path('module', 'vivodashboard_core') . '/vivodashboard_core.js', array('weight' => 10));
}

/**
 * Implements hook_facetapi_filters().
 */
function vivodashboard_core_facetapi_filters() {
  return array(
    'include_items' => array(
      'handler' => array(
        'label' => t('Include only specified items'),
        'class' => 'VivodashboardCoreIncludeFilter',
      ),
    ),
    'year_limit' => array(
      'handler' => array(
        'label' => t('Limit the number of years'),
        'class' => 'VivodashboardCoreYearLimitFilter',
      ),
    ),
    'empty_years' => array(
      'handler' => array(
        'label' => t('Fill in empty years'),
        'class' => 'VivodashboardCoreEmptyYearsFilter',
      ),
    ),
    'empty_months' => array(
      'handler' => array(
        'label' => t('Fill in empty months'),
        'class' => 'VivodashboardCoreEmptyMonthsFilter',
      ),
    ),
    'convert_months' => array(
      'handler' => array(
        'label' => t('Convert numbers to months'),
        'class' => 'VivodashboardCoreConvertMonthsFilter',
      ),
    ),
  );
}

/**
 * Implements hook_current_search_items().
 */
function vivodashboard_core_current_search_items() {
  return array(
    'reset_link' => array(
      'handler' => array(
        'label' => t('Reset link'),
        'class' => 'VivodashboardCurrentSearchReset',
      ),
    ),
    'grouped_active_items' => array(
      'handler' => array(
        'label' => t('Grouped active items'),
        'class' => 'VivodashboardCoreCurrentSearchItemGrouped',
      ),
    ),
  );
}

/**
 * Implements hook_search_api_ranges_minmax_alter().
 *
 * Adjusts the query for range slider facets to work around a bug.
 *
 * There appears to be a bug in search_api_ranges where changing facet values
 * also changes the min/max values, so that the min/max always equal user input.
 * This happens because search_api_ranges does not properly remove its own
 * query filters when querying for facet values. It looks like search_api may
 * have changed the structure of query filters to be objects instead of arrays.
 *
 * @see search_api_ranges_minmax()
 * @todo File a bug report.
 */
function vivodashboard_core_search_api_ranges_minmax_alter($vars, $order) {
  $field_name = $vars['range_field'];
  $query = $vars['query'];

  $filters = &$query->getFilter()->getFilters();
  foreach ($filters as $key => $filter) {
    if (is_object($filter) && $filter->hasTag("facet:{$field_name}")) {
      unset($filters[$key]);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Attaches JS for Chosen library to multiselect facets.
 */
function vivodashboard_core_form_facetapi_multiselect_form_alter(&$form, &$form_state) {
  $path = libraries_get_path('chosen');
  $form['#attached']['js'][] = $path . '/chosen.jquery.min.js';
  $form['#attached']['css'][] = $path . '/chosen.min.css';

  $form['#attached']['js'][] = drupal_get_path('module', 'vivodashboard_core') . '/plugins/facetapi_multiselect/facetapi_multiselect.chosen.js';

  $form['facets']['#attributes']['data-placeholder'] = ' ';
}

/**
 * Implements hook_chartgraph_provider().
 */
function vivodashboard_core_chartgraph_provider() {
  $provider = array(
    'path' => drupal_get_path('module', 'vivodashboard_core') . '/plugins/charts_graphs/vivodashboard_chartsgraphs_flot.inc',
    'clazz' => 'VivoDasbhboardChartsgraphsFlot',
    'name' => 'vivodashboard_flot',
    'nice_name' => 'VIVO Dashboard Flot',
    'chart_types' => array(
      'bar' => t('Bar'),
    ),
  );
  return (object) $provider;
}

/**
 * Implements hook_system_info_alter().
 *
 * Registers the ChartsGraphsFlot class for the charts_graphs_flot module so
 * we can extend it with VivoDasbhboardChartsgraphsFlot.
 *
 * @see https://drupal.org/node/2176239
 */
function vivodashboard_core_system_info_alter(&$info, $file, $type) {
  if ($file->name == 'charts_graphs_flot') {
    $info['files'][] = 'charts_graphs_flot.class.inc';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Attaches extra JS to search_api_ranges facets.
 */
function vivodashboard_core_form_search_api_ranges_block_slider_view_form_alter(&$form, &$form_state) {
  $form['#attached']['js'][] = drupal_get_path('module', 'vivodashboard_core') . '/plugins/search_api_ranges/search_api_ranges_slider_status.js';
}

/**
 * Implements hook_action_info().
 */
function vivodashboard_core_action_info() {
  return array(
    'vivodashboard_core_term_save_action' => array(
      'type' => 'taxonomy_term',
      'label' => t('Save term'),
      'description' => t('Saves a taxonomy term'),
      'configurable' => FALSE,
      'hooks' => array(
        'any' => TRUE,
      ),
      'aggregate' => FALSE,
    ),
  );
}

/**
 * Action callback.
 *
 * Used for updating journal rankings in bulk via Views Bulk Operations.
 */
function vivodashboard_core_term_save_action($term) {
  taxonomy_term_save($term);
}

/**
 * Implements hook_date_formats().
 */
function vivodashboard_core_date_formats() {
  $formats = array();
  $formats[] = array(
    'type' => 'year_month_day',
    'format' => 'Y-m-d',
    'locales' => array('en'),
  );
  $formats[] = array(
    'type' => 'year_month',
    'format' => 'Y M',
    'locales' => array('en'),
  );
  $formats[] = array(
    'type' => 'year',
    'format' => 'Y',
    'locales' => array('en'),
  );
  return $formats;
}

/**
 * Implements hook_date_format_types().
 */
function vivodashboard_core_date_format_types() {
  return array(
    'year' => t('Year'),
    'year_month' => t('Year + Month'),
    'year_month_day' => t('Year + Month + Day'),
  );
}

/**
 * Implements hook_entity_property_info_alter().
 *
 * Adds some custom entity properties to simplify data access.
 */
function vivodashboard_core_entity_property_info_alter(&$info) {
  $definition = array(
    'label' => t('RDF Types'),
    'description' => t('The field_rdf_type values for the entity as a list of URIs.'),
    'type' => 'list<string>',
    'getter callback' => 'vivodashboard_core_get_types',
  );

  foreach ($info['node']['bundles'] as &$bundle) {
    $bundle['properties']['rdf_types'] = $definition;
  }

  foreach ($info['taxonomy_term']['bundles'] as &$bundle) {
    $bundle['properties']['rdf_types'] = $definition;
  }
}

/**
 * Property "getter callback" for "rdf_types" property.
 *
 * Provides a list of URIs as strings via field_rdf_type taxonomy terms.
 */
function vivodashboard_core_get_types($entity, $options, $property_name, $entity_type, $info) {
  $types = $tids = array();

  $field_values = ($items = field_get_items($entity_type, $entity, 'field_rdf_type')) ? $items : array();
  foreach ($field_values as $field_value) {
    $tids[] = $field_value['tid'];
  }

  foreach (taxonomy_term_load_multiple($tids) as $term) {
    if ($item = field_get_items('taxonomy_term', $term, 'field_uri')) {
      $types[] = $item[0]['url'];
    }
  }

  return $types;
}

/**
 * Implements hook_taxonomy_term_update().
 */
function vivodashboard_core_taxonomy_term_update($term) {
  if ($term->vocabulary_machine_name == 'rdf_types') {
    vivodashboard_core_update_hidden_types($term);
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function vivodashboard_core_taxonomy_term_insert($term) {
  if ($term->vocabulary_machine_name == 'rdf_types') {
    vivodashboard_core_update_hidden_types($term);
  }
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function vivodashboard_core_taxonomy_term_delete($term) {
  if ($term->vocabulary_machine_name == 'rdf_types') {
    vivodashboard_core_update_hidden_types($term);
  }
}

/**
 * Updates the hidden status for a particular rdf_type term.
 *
 * A taxonomy term can be marked as 'hidden' using the boolean field_hidden.
 * We keep track of the TIDs of hidden terms in a variable to keep lookups fast.
 */
function vivodashboard_core_update_hidden_types($term) {
  $hidden_types = variable_get('vivodashboard_core_hidden_types', array());
  $is_hidden = !empty($term->field_hidden[LANGUAGE_NONE][0]['value']);

  if ($is_hidden) {
    $hidden_types[$term->tid] = $term->tid;
    variable_set('vivodashboard_core_hidden_types', $hidden_types);
  }
  elseif (isset($hidden_types[$term->tid])) {
    unset($hidden_types[$term->tid]);
    variable_set('vivodashboard_core_hidden_types', $hidden_types);
  }
}

/**
 * Implements hook_node_load().
 *
 * Prevent certain rdf_type taxonomy terms from being loaded with nodes,
 * when those terms have been marked as hidden.
 *
 * @see vivodashboard_core_update_hidden_types()
 */
function vivodashboard_core_node_load($nodes, $types) {
  $hidden_types = variable_get('vivodashboard_core_hidden_types', array());
  foreach ($nodes as $node) {
    if (!empty($node->field_rdf_type[LANGUAGE_NONE])) {
      // Remove values in our hidden types list.
      foreach ($node->field_rdf_type[LANGUAGE_NONE] as $delta => $value) {
        $tid = $value['tid'];
        if (isset($hidden_types[$tid])) {
          unset($node->field_rdf_type[LANGUAGE_NONE][$delta]);
        }
      }
    }
    // Remove entire field if there are no values left.
    if (empty($node->field_rdf_type[LANGUAGE_NONE])) {
      $node->field_rdf_type = array();
    }
  }
}

/**
 * Implements hook_preprocess_facetapi_link_inactive().
 *
 * Adds the facet name as a URL fragment in facet links.
 */
function vivodashboard_core_preprocess_facetapi_link_inactive(&$vars) {
  if (!empty($vars['options']['query']['f'])) {
    $last_filter = end($vars['options']['query']['f']);
    if (strpos($last_filter, ':') > 0) {
      list($facet_name, $facet_value) = explode(':', $last_filter);
      $vars['options']['fragment'] = $facet_name;
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function vivodashboard_core_node_presave($node) {
  // Ensure that we don't try and save node titles that are too long.
  if (strlen($node->title) >= 255) {
    $node->title = substr($node->title, 0, 251) . '...';
  }

  // Ensure that we don't try and save non-integer page numbers.
  if ($node->type == 'publication') {
    $wrapper = entity_metadata_wrapper('node', $node);

    if ($page_start = $wrapper->field_page_start->value()) {
      $page_start = ($integer = (int) $page_start) ? $integer : NULL;
      $wrapper->field_page_start->set($page_start);
    }
    if ($page_end = $wrapper->field_page_end->value()) {
      $page_end = ($integer = (int) $page_end) ? $integer : NULL;
      $wrapper->field_page_end->set($page_end);
    }
  }
}

/**
 * Implements hook_taxonomy_term_presave().
 *
 * Ensure that we don't try and save term names that are too long.
 */
function vivodashboard_core_taxonomy_term_presave($term) {
  if (strlen($term->name) >= 255) {
    $term->name = substr($term->name, 0, 251) . '...';
  }
  if (empty($term->vocabulary_machine_name)) {
    $vocab = taxonomy_vocabulary_load($term->vid);
    $term->vocabulary_machine_name = $vocab->machine_name;
  }
}
